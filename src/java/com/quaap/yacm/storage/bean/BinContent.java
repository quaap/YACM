/*
 *  Copyright (c) 2009 Thomas Kliethermes, thamus@kc.rr.com
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.quaap.yacm.storage.bean;
// Generated Feb 14, 2009 10:05:10 PM by Hibernate Tools 3.2.1.GA

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.Hibernate;

/**
 * Content generated by hbm2java
 */
public class BinContent implements java.io.Serializable {

   private Integer id;
   private Long length;
   private Blob binContent;

   public BinContent() {
   }

   public BinContent(Blob binContent) {
      this.binContent = binContent;
   }

   public BinContent(InputStream in) throws IOException {
      setBlobFromStream(in);
   }
   
   public Integer getId() {
      return this.id;
   }

   public void setId(Integer id) {
      this.id = id;
   }

   public Blob getBinContent() {
      return this.binContent;
   }

   public void setBinContent(Blob binContent) {
      this.binContent = binContent;
   }

   public void setBlobFromStream(InputStream in) throws IOException {
      binContent = Hibernate.createBlob(in);
      try {
         setLength(binContent.length());
      } catch (SQLException ex) {
         Logger.getLogger(BinContent.class.getName()).log(Level.SEVERE, null, ex);
      }
   }

   public InputStream getBlobStream() throws SQLException {
      return binContent.getBinaryStream();
   }

   public void writeBlobToOutputStream(OutputStream out) throws SQLException, IOException {
      if (binContent!=null) {
         try {
            InputStream blobstream = binContent.getBinaryStream();
            byte[] chunk = new byte[4096];
            int read = 0;
            while ((read = blobstream.read(chunk)) != -1) {
               out.write(chunk, 0, read);
            }
            blobstream.close();
         } finally {
            //System.out.println("blob.free called");
           // binContent.free();
           // System.out.println("blob.free suceeded");
         }
      }  else {
         out.write("null".getBytes());
      }

   }

 
   /**
    * @return the length
    */
   public Long getLength() {
      return length;
   }

   /**
    * @param length the length to set
    */
   public void setLength(Long length) {
      this.length = length;
   }
}


